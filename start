#!/usr/bin/env ruby

require "curses"
require_relative "lib/console"
require_relative "lib/menu"
require_relative "lib/player"
require_relative "lib/game_object"
require_relative "lib/scene"
require_relative "lib/scene_list"

Curses.raw
Curses.noecho
Curses.init_screen
Curses.stdscr.keypad(true)
Curses.curs_set(0)
Curses.refresh

# init
Console.start(17, 5)

class Game

	def initialize
		@scene = SceneList::SCENES[:start]
		@scene.set_player(Player.new, @scene.width / 2, @scene.height / 2)

		@menus = {
			inventory: InventoryMenu.new(30, 15, @scene.width, @scene.height),
			help: HelpMenu.new(30, 10, @scene.width, @scene.height),
			commands: CommandsMenu.new(30, 10, @scene.width, @scene.height)
		}
	end

	def handle_actions(actions)
		if actions[:menu]
			menu = @menus[actions[:menu]]
			if menu
				menu.show
				menu.hide
			else
				Console.log("Game#handle_actions: menu '#{menu.inspect}' doesn't exist")
			end
		end
		if actions[:scene]
			# actions[:scene] would be like: [:room_name, the_player, new_x, new_y]
			scene = SceneList::SCENES[actions[:scene][0]]
			if scene
				@scene = scene
				@scene.set_player(actions[:scene][1], actions[:scene][2], actions[:scene][3])
			end
		end
	end

	def game_loop
		loop do
			@scene.draw
			Console.draw

			key = Curses.getch

			case key
			when 258
				handle_actions(@scene.move_player(:down))
			when 259
				handle_actions(@scene.move_player(:up))
			when 260
				handle_actions(@scene.move_player(:left))
			when 261
				handle_actions(@scene.move_player(:right))
			when "i"
				@menus[:inventory].inventory = @scene.player.inventory
				q = @menus[:inventory].show
				@menus[:inventory].hide
				handle_actions(q)
			when "p"
				@scene.pickup_item
			when "q"
				@scene.close
				Console.close
				@menus.each { |_, m| m.close }
				Curses.close_screen
				exit
			when "?"
				q = @menus[:help].show
				@menus[:help].hide
				handle_actions(q)
			else
				Console.log(key.inspect, true)
			end
		end
	end

end

game = Game.new
game.game_loop
