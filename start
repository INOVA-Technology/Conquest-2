#!/usr/bin/env ruby

require "curses"
require_relative "lib/console"
Console.start(17, 5)

require_relative "lib/menu"
require_relative "lib/player"
require_relative "lib/game_object"
require_relative "lib/scene"
require_relative "lib/scene_list"

Curses.raw
Curses.noecho
Curses.init_screen
Curses.start_color
Curses.init_pair(Curses::COLOR_GREEN, Curses::COLOR_GREEN, Curses::COLOR_BLACK)
Curses.init_pair(Curses::COLOR_BLUE, Curses::COLOR_BLUE, Curses::COLOR_BLACK)
Curses.init_pair(Curses::COLOR_RED, Curses::COLOR_RED, Curses::COLOR_BLACK)
Curses.init_pair(Curses::COLOR_YELLOW, Curses::COLOR_YELLOW, Curses::COLOR_BLACK)
Curses.stdscr.keypad(true)
Curses.curs_set(0)
Curses.refresh

class Game

	def initialize
		scene = :start
		x = 8
		y = 4
		if ARGV[0] == "-d"
			if ARGV[1] && ARGV[2] && ARGV[3]
				scene = ARGV[1].to_sym
				x = ARGV[2].to_i
				y = ARGV[3].to_i
			end
		end
		@scene = SceneList::SCENES[scene]
		# @scene.set_player(Player.new, @scene.width / 2, @scene.height / 2)
		@scene.set_player(Player.new, x, y)

		@menus = {
			inventory: InventoryMenu.new(30, 15, @scene.width, @scene.height),
			help: HelpMenu.new(30, 10, @scene.width, @scene.height),
			commands: CommandsMenu.new(30, 10, @scene.width, @scene.height),
			item_actions: ItemActionsMenu.new(30, 10, @scene.width, @scene.height)
		}
	end

	def handle_actions(actions)
		if actions[:menu]
			menu = @menus[actions[:menu]]
			if menu
				menu.item = actions[:menu_item] if ItemActionsMenu === menu
				@scene.draw
				q = menu.show
				menu.hide
				handle_actions(q)
			else
				Console.log("Game#handle_actions: menu '#{menu.inspect}' doesn't exist")
			end
		end
		if actions[:scene]
			# actions[:scene] would be like: [:room_name, the_player, new_x, new_y]
			scene = SceneList::SCENES[actions[:scene][0]]
			if scene
				@scene = scene
				@scene.set_player(actions[:scene][1], actions[:scene][2], actions[:scene][3])
			end
		end
		if actions[:item_action]
			item, action = actions[:item_action]
			case action
			when :inspect
				Console.write(item.description)
			when :eat
				if item.is_a?(Food)
					max_health = @scene.player.max_health
					old_health = @scene.player.health
					item_health = item.health

					@scene.player.health += item_health
					@scene.player.health = max_health if @scene.player.health > max_health
				
					diff = @scene.player.health - old_health
					item.health -= diff
					
					@scene.player.inventory.delete(item) if item.health == 0
				else
					Console.write("You can't eat that!") # this shouldn't be able to happen
				end
			end
		end
	end

	def game_loop
		loop do
			@scene.draw
			Console.draw

			key = Curses.getch

			case key
			when 258
				handle_actions(@scene.move_player(:down))
			when 259
				handle_actions(@scene.move_player(:up))
			when 260
				handle_actions(@scene.move_player(:left))
			when 261
				handle_actions(@scene.move_player(:right))
			when "i"
				@menus[:inventory].inventory = @scene.player.inventory
				q = @menus[:inventory].show
				@menus[:inventory].hide
				handle_actions(q)
			when "p"
				@scene.pickup_item
			when "q"
				SceneList::SCENES.each { |_, s| s.close }
				Console.close
				@menus.each { |_, m| m.close }
				Curses.close_screen
				exit
			when "?"
				q = @menus[:help].show
				@menus[:help].hide
				handle_actions(q)
			when 12
				Console.log(@scene.player.health)
			when 3 # Ctrl + c
				Console.log("#{@scene.player.x}, #{@scene.player.y}")
			else
				Console.log(key.inspect)
			end
		end
	end

end

game = Game.new
game.game_loop
